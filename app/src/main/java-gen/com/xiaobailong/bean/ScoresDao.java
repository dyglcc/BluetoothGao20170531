package com.xiaobailong.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCORES".
*/
public class ScoresDao extends AbstractDao<Scores, Long> {

    public static final String TABLENAME = "SCORES";

    /**
     * Properties of entity Scores.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Scores = new Property(1, Integer.class, "scores", false, "SCORES");
        public final static Property Date_ = new Property(2, Long.class, "date_", false, "DATE_");
        public final static Property Devices = new Property(3, String.class, "devices", false, "DEVICES");
        public final static Property Xuehao = new Property(4, String.class, "xuehao", false, "XUEHAO");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Class_ = new Property(6, Long.class, "class_", false, "CLASS_");
        public final static Property Year_ = new Property(7, Long.class, "year_", false, "YEAR_");
        public final static Property Consume_time = new Property(8, String.class, "consume_time", false, "CONSUME_TIME");
    }


    public ScoresDao(DaoConfig config) {
        super(config);
    }
    
    public ScoresDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCORES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SCORES\" INTEGER," + // 1: scores
                "\"DATE_\" INTEGER," + // 2: date_
                "\"DEVICES\" TEXT," + // 3: devices
                "\"XUEHAO\" TEXT," + // 4: xuehao
                "\"NAME\" TEXT," + // 5: name
                "\"CLASS_\" INTEGER," + // 6: class_
                "\"YEAR_\" INTEGER," + // 7: year_
                "\"CONSUME_TIME\" TEXT);"); // 8: consume_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCORES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Scores entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer scores = entity.getScores();
        if (scores != null) {
            stmt.bindLong(2, scores);
        }
 
        Long date_ = entity.getDate_();
        if (date_ != null) {
            stmt.bindLong(3, date_);
        }
 
        String devices = entity.getDevices();
        if (devices != null) {
            stmt.bindString(4, devices);
        }
 
        String xuehao = entity.getXuehao();
        if (xuehao != null) {
            stmt.bindString(5, xuehao);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        Long class_ = entity.getClass_();
        if (class_ != null) {
            stmt.bindLong(7, class_);
        }
 
        Long year_ = entity.getYear_();
        if (year_ != null) {
            stmt.bindLong(8, year_);
        }
 
        String consume_time = entity.getConsume_time();
        if (consume_time != null) {
            stmt.bindString(9, consume_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Scores entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer scores = entity.getScores();
        if (scores != null) {
            stmt.bindLong(2, scores);
        }
 
        Long date_ = entity.getDate_();
        if (date_ != null) {
            stmt.bindLong(3, date_);
        }
 
        String devices = entity.getDevices();
        if (devices != null) {
            stmt.bindString(4, devices);
        }
 
        String xuehao = entity.getXuehao();
        if (xuehao != null) {
            stmt.bindString(5, xuehao);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        Long class_ = entity.getClass_();
        if (class_ != null) {
            stmt.bindLong(7, class_);
        }
 
        Long year_ = entity.getYear_();
        if (year_ != null) {
            stmt.bindLong(8, year_);
        }
 
        String consume_time = entity.getConsume_time();
        if (consume_time != null) {
            stmt.bindString(9, consume_time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Scores readEntity(Cursor cursor, int offset) {
        Scores entity = new Scores( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // scores
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // date_
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // devices
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // xuehao
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // class_
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // year_
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // consume_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Scores entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setScores(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDate_(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDevices(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setXuehao(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClass_(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setYear_(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setConsume_time(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Scores entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Scores entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Scores entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
